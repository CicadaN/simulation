package io.example.map;import io.example.entity.Entity;import java.util.*;public class WorldMap {    public final int width;    public final int height;    private final Map<Position, Entity> entities = new HashMap<>();    public WorldMap(int width, int height) {        this.width = width;        this.height = height;    }    public int getWidth() {        return width;    }    public int getHeight() {        return height;    }    public Optional<Entity> getEntity(Position pos) {        validatePosition(pos);        return Optional.ofNullable(entities.get(pos));    }    public boolean isOccupied(Position pos) {        validatePosition(pos);        return entities.containsKey(pos);    }    public boolean isWithinBounds(Position pos) {        return pos.x() >= 0 && pos.x() < width &&                pos.y() >= 0 && pos.y() < height;    }    public void addEntity(Position pos, Entity entity) {        validatePosition(pos);        if (isOccupied(pos)) {            throw new IllegalArgumentException("Position already occupied: " + pos);        }        entities.put(pos, entity);    }    public void removeEntity(Position pos) {        validatePosition(pos);        entities.remove(pos);    }    public Map<Position, Entity> getEntitiesSnapshot() {        return Map.copyOf(entities);    }    private void validatePosition(Position pos) {        if (!isWithinBounds(pos)) {            throw new IllegalArgumentException("Position out of bounds: " + pos);        }    }}