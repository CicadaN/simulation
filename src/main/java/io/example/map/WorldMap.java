package io.example.map;import io.example.entity.Entity;import java.util.*;public class WorldMap {    public final int width;    public final int height;    private final Map<Position, Entity> entities = new HashMap<>();    public WorldMap(int width, int height) {        this.width = width;        this.height = height;    }    public int getWidth() {        return width;    }    public int getHeight() {        return height;    }    public Optional<Entity> getEntity(Position position) {        return Optional.ofNullable(entities.get(position));    }    public boolean isWithinBounds(Position pos) {        return (pos.x() >= 0 && pos.x() < width) &&                (pos.y() >= 0 && pos.y() < height);    }    public boolean isOccupied(Position pos) {        return entities.containsKey(pos);    }    public void addEntity(Position pos, Entity entity) {        if (isOccupied(pos)) {            throw new IllegalArgumentException("Position already occupied: " + pos);        }        if (!isWithinBounds(pos)) {            throw new IllegalArgumentException("Position out of bounds: " + pos);        }        entities.put(pos, entity);    }    public void moveEntity(Position pos, Position target) {        if (!entities.containsKey(pos)) {            throw new IllegalArgumentException("No entity" + pos);        }        if (!isWithinBounds(target)) {            throw new IllegalArgumentException("Invalid target" + target);        }        if (isOccupied(target)) {            throw new IllegalArgumentException("Target already occupied" + target);        }        Entity entity = entities.remove(pos);        entities.put(target, entity);    }    public Map<Position, Entity> getCopyEntity() {        return Map.copyOf(entities);    }    public void removeEntity(Position pos) {        entities.remove(pos);    }    public List<Position> allPositions() {        List<Position> result = new ArrayList<>();        for (int x = 0; x < width; x++) {            for (int y = 0; y < height; y++) {                result.add(new Position(x, y));            }        }        return result;    }}